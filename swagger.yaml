openapi: 3.0.0
info:
  version: '1.0.0'
  title: 'Добавление тегов на фото'
  description: Концепция на [https://youtrack.wildberries.ru](https://youtrack.wildberries.ru/articles/CD-A-719/Dobavlenie-tegov-na-foto)
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/RDIGGS080/tagManagement/1.0.0
  - url: 'https://localhost:8080'
paths:
  /api/v1/tag/add:
    post:
      summary: Метод добавления тегов на фото
      description: |
        Позволяет добавить несколько тегов (ссылок на другую карточку поставщика) на фото, каждый тег привязан к НМ.
        Тег можно добавить только на фото из НМС. Фото не должно быть заглавной.
        Ограничения по количеству тегов должны быть прописаны на стороне приложения.
      operationId: addTags
      parameters:
        - in: header
          name: X-Supplier-Id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTagsRequest'
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request
  /api/v1/tag/edit/{tagId}:
    put:
      summary: Метод редактирования тега
      description: |
        Позволяет изменить положение тега на фото.
      operationId: editTag
      parameters:
        - in: path
          name: tagId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditTagRequest'
      responses:
        '200':
          description: Тег успешно изменен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request
  /api/v1//tag/{tagId}:
    delete:
      summary: Метод удаления тега
      description: Позволяет удалить существующий тег. Для авторизации используется X-User-Id.
      operationId: deleteTag
      parameters:
        - in: header
          name: X-User-Id
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: tagId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request
  /api/v1/tagByNM:
    get:
      summary: Метод получения тегов по nmId
      description: Позволяет получить все теги привязанные к NM.
      operationId: getTags
      parameters:
        - in: query
          name: nmId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTagsResponse'
        '400':
          description: Bad request
  /api/v1/tagList:
    get:
      summary: Метод получения всех тегов
      description: Позволяет получить все теги поставщика.
      operationId: getAllTags
      parameters:
        - in: header
          name: X-Supplier-Id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllTagsResponse'
        '400':
          description: Bad request
components:
  schemas:
    AddTagsRequest:
      type: object
      properties:
        nmId:
          type: number
          example: 168737060
        photoWithTags:
          type: array
          items:
            type: object
            properties:
              photoId:
                type: string
                format: uuid
              isMaine:
                type: boolean
                example: false
                description: Является ли фото первой
              tags:
                type: array
                items:
                  type: object
                  properties:
                    taggedNM:
                      type: integer
                      example: 168737059
                      description: На какую карточку поставщика ссылаемся
                    coordinates:
                      $ref: '#/components/schemas/Coordinates'
    Coordinates:
      type: array
      items:
        type: number
        example: 10, 36
        minItems: 2
        maxItems: 2
        description: Массив из 2 чисел, описывающих координаты тега
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
    EditTagRequest:
      type: object
      properties:
        newPosition:
          $ref: '#/components/schemas/Coordinates'
    GetTagsResponse:
      type: array
      items:
        type: object
        properties:
          photoId:
            type: string
            format: uuid
            description: Идентификатор фото, на которой находятся теги.
          tags:
            type: array
            items:
              $ref: '#/components/schemas/TagDetails'
            description: Массив тегов, привязанных к фотографии.
    GetAllTagsResponse:
      type: array
      items:
        type: object
        properties:
          nmId:
            type: integer
            description: Идентификатор NM.
            example: 168737060
          photoWithTags:
            type: array
            items:
              $ref: '#/components/schemas/TagWithPhotoId'
    TagWithPhotoId:
      type: object
      required:
        - photoId
        - tags
      properties:
        photoId:
          type: string
          format: uuid
          description: Идентификатор фото, на котором находятся теги.
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagDetails'          
    TagDetails:
      type: object
      properties:
        tagId:
          type: string
          format: uuid
          description: Идентификатор тега.
        productId:
          type: integer
          example: 168737059
          description: Идентификатор NM, на который ссылается тег.
        position:
          $ref: '#/components/schemas/Coordinates'
