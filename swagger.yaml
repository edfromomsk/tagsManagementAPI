openapi: 3.0.0
info:
  version: '1.0.0'
  title: 'Добавление тегов на фото'
  description: Концепция на [https://youtrack.wildberries.ru](https://youtrack.wildberries.ru/articles/CD-A-719/Dobavlenie-tegov-na-fото)
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/RDIGGS080/tagManagement/1.0.0
  - url: 'https://localhost:8080'
paths:
  /api/v1/tags:
    post:
      summary: Метод добавления тегов на фото
      description: Позволяет добавить несколько тегов на фото, каждый тег привязан к НМ.
      operationId: addTags
      parameters:
        - in: header
          name: X-Supplier-Id
          description: ИД поставщика
          required: true
          schema:
            type: integer
        - in: header
          name: Idempotency-key
          required: true
          schema:
            type: string
            format: uuid
          description: 'Уникальное значение, генерируемое клиентом, чтобы сделать запрос идемпотентным.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTagsRequest'
      responses:
        '201':
          description: Тег(и) добавлен(ы)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllTagsResponse'
        '400':
          description: Bad Request
        '401':
          description: Необходима аутентификация
        '403':
          description: Доступ запрещен
        '404':
          description: Ресурс не найден
        '409':
          description: Конфликт (тег уже существует)
        '422':
          description: Невозможно обработать сущность (например, ошибка валидации)
        '501':
          description: Not Implemented
        '502':
          description: Bad Gateway
        '503':
          description: Service Unavailable
        '504':
          description: Gateway Timeout
    get:
      summary: Метод получения всех тегов
      description: 'GET /api/v1/tags/{nmId} позволяет получить все теги привязанные к карточке или все теги поставщика, если nmId не указан в пути. На стороне бека выборка данных может выглядеть следующим образом: "SELECT * FROM [productTags] WHERE nmId = {nmId} ORDER BY nmId" (в первом случае) или "SELECT *.t FROM productTags t LEFT JOIN nomenclatures ON t.nm_id = n.id WHERE n.supplier_id = {X-Supplier-Id}" (во втором)'
      operationId: getTags
      parameters:
        - in: query
          name: nmId
          required: false
          schema:
            type: integer
        - in: header
          name:  X-Supplier-Id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/GetAllTagsResponse'
                  - $ref: '#/components/schemas/GetTagList'
        '400':
          description: Bad request
  /api/v1/tags/{tagId}:
    put:
      summary: Метод редактирования тега
      description: Позволяет изменить положение тега на фото.
      operationId: editTag
      parameters:
        - in: path
          name: tagId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditTagRequest'
      responses:
        '200':
          description: Тег успешно изменен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request
    delete:
      summary: Метод удаления тега
      description: Позволяет удалить существующий тег.
      operationId: deleteTag
      parameters:
        - in: header
          name: X-User-Id
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: tagId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request
components:
  schemas:
    AddTagsRequest:
      type: object
      properties:
        nmId:
          type: integer
          example: 168737060
        photosWithTags:
          $ref: '#/components/schemas/GetAllTagsResponse'
    Coordinates:
      type: array
      items:
        type: number
        example: 10, 36
        minItems: 2
        maxItems: 2
        description: Массив из 2 чисел, описывающих координаты тега
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
    EditTagRequest:
      type: object
      properties:
        newPosition:
          $ref: '#/components/schemas/Coordinates'
    GetAllTagsResponse:
      type: array
      items:
        type: object
        properties:
          photoId:
            type: string
            format: uuid
            description: Идентификатор фото, на которой находятся теги.
          isMain:
            type: boolean
            example: false
            description: фото не должно быть первым
          tags:
            type: array
            items:
              $ref: '#/components/schemas/TagDetails'
            description: Массив тегов, привязанных к фотографии.
    GetTagList:
      type: array
      items:
        type: object
        properties:
          nmId:
            type: integer
            example: 168737060
          taggedPhotos:  
            $ref: '#/components/schemas/GetAllTagsResponse'
      description: Все теги по поставщику
    TagDetails:
      type: object
      properties:
        tagId:
          type: string
          format: uuid
          description: Идентификатор тега.
        taggedNM:
          type: integer
          example: 168737059
          description: Идентификатор карточки, на которую ссылается тег.
        tagCoordinates:
          $ref: '#/components/schemas/Coordinates'